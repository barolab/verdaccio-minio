#!/bin/bash

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

source "$DIR/util"

isMinioValid() {
  title "Checking minio is in valid state (verdaccio bucket exists & db is initialized)"
  {
    mc config host add example $MINIO_ENDPOINT $MINIO_ACCESS_KEY $MINIO_SECRET_KEY
    [[ "$(mc ls example)" =~ 'verdaccio' ]] || error "Verdaccio bucket does not exists, meaning a problem happened during plugin initialization"
    [[ "$(mc ls example/verdaccio)" =~ 'db.json' ]] || error "Verdaccio database does not exists, meaning a problem happened during plugin initialization"

    if mc ls example/verdaccio | grep -q 'async'; then
      panic "Verdaccio bucket already contains packages, meaning cleanup didn't happend correctly for v${VERDACCIO_VERSION}"
    fi
  } || {
    panic "Failed to validate minio state for v${VERDACCIO_VERSION}"
  }
}

isYarnAbleToInstall() {
  title "Try installing dependencies using verdaccio v${VERDACCIO_VERSION} as a proxy"
  {
    rm -rf ./node_modules
    yarn cache clean
    yarn install --har --verbose --registry=$VERDACCIO_ENDPOINT >"$DIR/../example/install.yarn.log"
  } || {
    panic "Failed to install dependencies through verdaccio v${VERDACCIO_VERSION}"
  }
}

isYarnAbleToPublish() {
  title "Try publishing package using verdaccio v${VERDACCIO_VERSION}"

  yarn login --registry $VERDACCIO_ENDPOINT
  yarn publish --new-version 1.0.0 --registry $VERDACCIO_ENDPOINT --non-interactive
  if [ $? -ne 0 ]; then
    panic "Publish command exited with code $?"
  fi

  # Make sure the binary on minio is not empty
  [[ $(mc cp example/verdaccio/example/example-1.0.0.tgz .) =~ "Total: 0 B" ]] && panic "Published package is 0 Bytes"
  rm example-1.0.0.tgz
}

accept() {
  setVersion $1
  title "Running acceptance for v${VERDACCIO_VERSION}"
  start
  isMinioValid
  isYarnAbleToInstall
  isYarnAbleToPublish
  cleanup
}

# Build plugin
build

# Copy plugin to the example directory
copy

# Remove old containers to start from scratch
prune

if [ -z "$1" ]; then
  # Run acceptance tests for all supported versions of Verdaccio
  accept "4.3"
  accept "4.2"
  accept "4.1"
  accept "4.0"
else
  # Run acceptance tests for the given version
  accept "$1"
fi

# Go back to project root directory
root
